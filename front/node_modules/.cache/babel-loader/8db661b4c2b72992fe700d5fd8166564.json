{"remainingRequest":"C:\\Users\\c\\Desktop\\mfi\\front\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\c\\Desktop\\mfi\\front\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\c\\Desktop\\mfi\\front\\src\\store\\idea.js","dependencies":[{"path":"C:\\Users\\c\\Desktop\\mfi\\front\\src\\store\\idea.js","mtime":1630863328877},{"path":"C:\\Users\\c\\Desktop\\mfi\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511710000},{"path":"C:\\Users\\c\\Desktop\\mfi\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511710000},{"path":"C:\\Users\\c\\Desktop\\mfi\\front\\node_modules\\eslint-loader\\index.js","mtime":1630511710000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L1VzZXJzL2MvRGVza3RvcC9tZmkvZnJvbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CnZhciB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhY2Nlc3NUb2tlbicpOwp2YXIgaWRlYU1vZHVsZSA9IHsKICBzdGF0ZTogewogICAgaWRlYUxpc3Q6IFtdLAogICAgY2xpY2tJZGVhRGF0YTogW10sCiAgICBjb21tZW50RGF0YTogW10KICB9LAogIG11dGF0aW9uczogewogICAgaWRlYV9zZXRfZGF0YTogZnVuY3Rpb24gaWRlYV9zZXRfZGF0YShzdGF0ZSwgaWRlYURhdGEpIHsKICAgICAgc3RhdGUuaWRlYUxpc3QucHVzaChpZGVhRGF0YSk7CiAgICB9LAogICAgY2xpY2tfaWRlYV9zZXRfZGF0YTogZnVuY3Rpb24gY2xpY2tfaWRlYV9zZXRfZGF0YShzdGF0ZSwgaWRlYURhdGEpIHsKICAgICAgc3RhdGUuY2xpY2tJZGVhRGF0YS5wdXNoKGlkZWFEYXRhKTsgLy8gY29uc29sZS5sb2coc3RhdGUuY2xpY2tJZGVhRGF0YVswXSk7CiAgICB9LAogICAgY2xpY2tfY29tbWVudF9zZXRfZGF0YTogZnVuY3Rpb24gY2xpY2tfY29tbWVudF9zZXRfZGF0YShzdGF0ZSwgY29tbWVudERhdGEpIHsKICAgICAgc3RhdGUuY29tbWVudERhdGEucHVzaChjb21tZW50RGF0YSk7CiAgICB9CiAgfSwKICBnZXR0ZXJzOiB7CiAgICBpZGVhX2dldF9kYXRhOiBmdW5jdGlvbiBpZGVhX2dldF9kYXRhKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5pZGVhTGlzdFswXTsKICAgIH0sCiAgICBjbGlja19pZGVhX2dldF9kYXRhOiBmdW5jdGlvbiBjbGlja19pZGVhX2dldF9kYXRhKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5jbGlja0lkZWFEYXRhWzBdOwogICAgfSwKICAgIGNvbW1lbnRfZ2V0X2RhdGE6IGZ1bmN0aW9uIGNvbW1lbnRfZ2V0X2RhdGEoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmNvbW1lbnREYXRhWzBdOwogICAgfQogIH0sCiAgYWN0aW9uczogewogICAgLy/slYTsnbTrlJTslrQg67O07Jes7KO86riwCiAgICBpZGVhX3Nob3c6IGZ1bmN0aW9uIGlkZWFfc2hvdyhfcmVmKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcmVzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9pZGVhJywgewogICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiB0b2tlbgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIGNvbW1pdCgnaWRlYV9zZXRfZGF0YScsIHJlcy5kYXRhLmRhdGEpOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA4OwogICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgxKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0LnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMSwgOF1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgY2xpY2tfaWRlYTogZnVuY3Rpb24gY2xpY2tfaWRlYShfcmVmMiwgaWRlYUlkeCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgY29tbWl0LCByZXM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9pZGVhL2lkZWEtY2xpY2s/aWRlYUlkeD0nICsgaWRlYUlkeC5pZGVhSWR4LCB7CiAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IHRva2VuCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIGNvbW1pdCgnY2xpY2tfaWRlYV9zZXRfZGF0YScsIHJlcy5kYXRhLmRhdGEpOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDg7CiAgICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDIudDApOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzEsIDhdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGlkZWFfY29tbWVudDogZnVuY3Rpb24gaWRlYV9jb21tZW50KF9yZWYzLCBpZGVhSWR4KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHZhciBjb21taXQsIHJlczsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjMuY29tbWl0OwogICAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAxOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2NvbW1lbnQ/aWRlYUlkeD0nICsgaWRlYUlkeC5pZGVhSWR4LCB7CiAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IHRva2VuCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgIGNvbW1pdCgnY2xpY2tfY29tbWVudF9zZXRfZGF0YScsIHJlcy5kYXRhLmRhdGEpOyAvLyBjb25zb2xlLmxvZyhyZXMuZGF0YS5kYXRhKTsKCiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDExOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gODsKICAgICAgICAgICAgICAgIF9jb250ZXh0My50MCA9IF9jb250ZXh0M1siY2F0Y2giXSgxKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0My50MCk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIG51bGwsIFtbMSwgOF1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgYWRkX2NvbW1lbnQ6IGZ1bmN0aW9uIGFkZF9jb21tZW50KF9yZWY0LCBjb21tZW50RGF0YSkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgICB2YXIgY29tbWl0LCByZXM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY0LmNvbW1pdDsKICAgICAgICAgICAgICAgIGNvbW1pdDsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KCdodHRwOi8vbG9jYWxob3N0OjgwODAvY29tbWVudCcsIHsKICAgICAgICAgICAgICAgICAgY29tbWVudDogY29tbWVudERhdGEuY29tbWVudCwKICAgICAgICAgICAgICAgICAgaWRlYUlkeDogY29tbWVudERhdGEuaWRlYUlkeAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiB0b2tlbgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDExOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gODsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC50MCA9IF9jb250ZXh0NFsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0NC50MCk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICByZXM7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQsIG51bGwsIFtbMiwgOF1dKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfQp9OwpleHBvcnQgZGVmYXVsdCBpZGVhTW9kdWxlOw=="},{"version":3,"sources":["C:/Users/c/Desktop/mfi/front/src/store/idea.js"],"names":["axios","token","localStorage","getItem","ideaModule","state","ideaList","clickIdeaData","commentData","mutations","idea_set_data","ideaData","push","click_idea_set_data","click_comment_set_data","getters","idea_get_data","click_idea_get_data","comment_get_data","actions","idea_show","commit","get","headers","res","data","console","log","click_idea","ideaIdx","idea_comment","add_comment","post","comment"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nlet token = localStorage.getItem('accessToken');\r\n\r\nconst ideaModule = {\r\n    state: {\r\n        ideaList : [],\r\n        clickIdeaData : [],\r\n        commentData : [],\r\n    },\r\n    mutations: {\r\n        idea_set_data (state, ideaData) {\r\n            state.ideaList.push(ideaData);\r\n        },\r\n        click_idea_set_data(state, ideaData){\r\n            state.clickIdeaData.push(ideaData);\r\n            // console.log(state.clickIdeaData[0]);\r\n        },\r\n        click_comment_set_data(state, commentData){\r\n            state.commentData.push(commentData);\r\n        }\r\n    },\r\n    getters: {\r\n        idea_get_data(state){\r\n            return state.ideaList[0];\r\n        },\r\n        click_idea_get_data(state){\r\n            return state.clickIdeaData[0];\r\n        },\r\n        comment_get_data(state){\r\n            return state.commentData[0];\r\n        }\r\n    },\r\n    actions: {\r\n        //아이디어 보여주기\r\n        async idea_show ({ commit }) {\r\n            let res;\r\n            try {\r\n                res = await axios.get('http://localhost:8080/idea', {\r\n                    headers : {\r\n                        'Authorization' : token\r\n                    }\r\n                });\r\n                commit('idea_set_data', res.data.data);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n            \r\n        },\r\n        async click_idea({commit}, ideaIdx ) {\r\n            let res;\r\n            try {\r\n                res = await axios.get('http://localhost:8080/idea/idea-click?ideaIdx='+ideaIdx.ideaIdx, {\r\n                    headers : {\r\n                        'Authorization' : token\r\n                    }\r\n                });\r\n                commit('click_idea_set_data', res.data.data)\r\n            }catch(err){\r\n                console.log(err);\r\n            }\r\n            \r\n        },\r\n        async idea_comment({commit}, ideaIdx){\r\n            let res;\r\n            try {\r\n                res = await axios.get('http://localhost:8080/comment?ideaIdx='+ ideaIdx.ideaIdx, {\r\n                    headers : {\r\n                        'Authorization' : token\r\n                    }\r\n                });\r\n                commit('click_comment_set_data', res.data.data);\r\n                // console.log(res.data.data);\r\n            }catch(err){\r\n                console.log(err)\r\n            }\r\n            \r\n        },\r\n        async add_comment({commit}, commentData){\r\n            let res;\r\n            commit\r\n            try {\r\n                res = await axios.post('http://localhost:8080/comment', \r\n                {\r\n                    comment : commentData.comment,\r\n                    ideaIdx : commentData.ideaIdx\r\n                },\r\n                {\r\n                    headers : {\r\n                        'Authorization' : token\r\n                    }\r\n                })\r\n            }catch(err){\r\n                console.log(err);\r\n            }\r\n            res\r\n        }\r\n    }\r\n}\r\n\r\n  export default ideaModule"]}]}