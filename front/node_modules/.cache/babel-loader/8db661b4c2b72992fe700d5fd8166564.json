{"remainingRequest":"C:\\Users\\c\\Desktop\\mfi\\front\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\c\\Desktop\\mfi\\front\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\c\\Desktop\\mfi\\front\\src\\store\\idea.js","dependencies":[{"path":"C:\\Users\\c\\Desktop\\mfi\\front\\src\\store\\idea.js","mtime":1630867144903},{"path":"C:\\Users\\c\\Desktop\\mfi\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630511710000},{"path":"C:\\Users\\c\\Desktop\\mfi\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":1630511710000},{"path":"C:\\Users\\c\\Desktop\\mfi\\front\\node_modules\\eslint-loader\\index.js","mtime":1630511710000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L1VzZXJzL2MvRGVza3RvcC9tZmkvZnJvbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CnZhciB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhY2Nlc3NUb2tlbicpOwp2YXIgaWRlYU1vZHVsZSA9IHsKICBzdGF0ZTogewogICAgaWRlYUxpc3Q6IFtdLAogICAgY2xpY2tJZGVhRGF0YTogW10sCiAgICBjb21tZW50RGF0YTogW10KICB9LAogIG11dGF0aW9uczogewogICAgaWRlYV9zZXRfZGF0YTogZnVuY3Rpb24gaWRlYV9zZXRfZGF0YShzdGF0ZSwgaWRlYURhdGEpIHsKICAgICAgc3RhdGUuaWRlYUxpc3QucHVzaChpZGVhRGF0YSk7CiAgICB9LAogICAgY2xpY2tfaWRlYV9zZXRfZGF0YTogZnVuY3Rpb24gY2xpY2tfaWRlYV9zZXRfZGF0YShzdGF0ZSwgaWRlYURhdGEpIHsKICAgICAgc3RhdGUuY2xpY2tJZGVhRGF0YSA9IFtdOyAvL+2VmC4uCgogICAgICBzdGF0ZS5jbGlja0lkZWFEYXRhLnB1c2goaWRlYURhdGEpOwogICAgfSwKICAgIGNsaWNrX2NvbW1lbnRfc2V0X2RhdGE6IGZ1bmN0aW9uIGNsaWNrX2NvbW1lbnRfc2V0X2RhdGEoc3RhdGUsIGNvbW1lbnREYXRhKSB7CiAgICAgIHN0YXRlLmNvbW1lbnREYXRhID0gW107CiAgICAgIHN0YXRlLmNvbW1lbnREYXRhLnB1c2goY29tbWVudERhdGEpOwogICAgfQogIH0sCiAgZ2V0dGVyczogewogICAgaWRlYV9nZXRfZGF0YTogZnVuY3Rpb24gaWRlYV9nZXRfZGF0YShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuaWRlYUxpc3RbMF07CiAgICB9LAogICAgY2xpY2tfaWRlYV9nZXRfZGF0YTogZnVuY3Rpb24gY2xpY2tfaWRlYV9nZXRfZGF0YShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuY2xpY2tJZGVhRGF0YVswXTsKICAgIH0sCiAgICBjb21tZW50X2dldF9kYXRhOiBmdW5jdGlvbiBjb21tZW50X2dldF9kYXRhKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5jb21tZW50RGF0YVswXTsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIC8v7JWE7J2065SU7Ja0IOuztOyXrOyjvOq4sAogICAgaWRlYV9zaG93OiBmdW5jdGlvbiBpZGVhX3Nob3coX3JlZikgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBjb21taXQsIHJlczsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KCdodHRwOi8vbG9jYWxob3N0OjgwODAvaWRlYScsIHsKICAgICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogdG9rZW4KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBjb21taXQoJ2lkZWFfc2V0X2RhdGEnLCByZXMuZGF0YS5kYXRhKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gODsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dC50MCk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzEsIDhdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGNsaWNrX2lkZWE6IGZ1bmN0aW9uIGNsaWNrX2lkZWEoX3JlZjIsIGlkZWFJZHgpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcmVzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMi5jb21taXQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDE7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KCdodHRwOi8vbG9jYWxob3N0OjgwODAvaWRlYS9pZGVhLWNsaWNrP2lkZWFJZHg9JyArIGlkZWFJZHguaWRlYUlkeCwgewogICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiB0b2tlbgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBjb21taXQoJ2NsaWNrX2lkZWFfc2V0X2RhdGEnLCByZXMuZGF0YS5kYXRhKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA4OwogICAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQyLnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgbnVsbCwgW1sxLCA4XV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBpZGVhX2NvbW1lbnQ6IGZ1bmN0aW9uIGlkZWFfY29tbWVudChfcmVmMywgaWRlYUlkeCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgY29tbWl0LCByZXM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9jb21tZW50P2lkZWFJZHg9JyArIGlkZWFJZHguaWRlYUlkeCwgewogICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiB0b2tlbgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgICBjb21taXQoJ2NsaWNrX2NvbW1lbnRfc2V0X2RhdGEnLCByZXMuZGF0YS5kYXRhKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSA4OwogICAgICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gX2NvbnRleHQzWyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQzLnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMywgbnVsbCwgW1sxLCA4XV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBhZGRfY29tbWVudDogZnVuY3Rpb24gYWRkX2NvbW1lbnQoX3JlZjQsIGNvbW1lbnREYXRhKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHZhciBjb21taXQsIHJlczsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjQuY29tbWl0OwogICAgICAgICAgICAgICAgY29tbWl0OwogICAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnBvc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9jb21tZW50JywgewogICAgICAgICAgICAgICAgICBjb21tZW50OiBjb21tZW50RGF0YS5jb21tZW50LAogICAgICAgICAgICAgICAgICBpZGVhSWR4OiBjb21tZW50RGF0YS5pZGVhSWR4CiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IHRva2VuCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSA4OwogICAgICAgICAgICAgICAgX2NvbnRleHQ0LnQwID0gX2NvbnRleHQ0WyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQ0LnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIHJlczsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCwgbnVsbCwgW1syLCA4XV0pOwogICAgICB9KSkoKTsKICAgIH0KICB9Cn07CmV4cG9ydCBkZWZhdWx0IGlkZWFNb2R1bGU7"},{"version":3,"sources":["C:/Users/c/Desktop/mfi/front/src/store/idea.js"],"names":["axios","token","localStorage","getItem","ideaModule","state","ideaList","clickIdeaData","commentData","mutations","idea_set_data","ideaData","push","click_idea_set_data","click_comment_set_data","getters","idea_get_data","click_idea_get_data","comment_get_data","actions","idea_show","commit","get","headers","res","data","console","log","click_idea","ideaIdx","idea_comment","add_comment","post","comment"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nlet token = localStorage.getItem('accessToken');\r\n\r\nconst ideaModule = {\r\n    state: {\r\n        ideaList : [],\r\n        clickIdeaData : [],\r\n        commentData : [],\r\n    },\r\n    mutations: {\r\n        idea_set_data (state, ideaData) {\r\n            state.ideaList.push(ideaData);\r\n        },\r\n        click_idea_set_data(state, ideaData){\r\n            state.clickIdeaData = []; //하..\r\n            state.clickIdeaData.push(ideaData);\r\n        },\r\n        click_comment_set_data(state, commentData){\r\n            state.commentData = [];\r\n            state.commentData.push(commentData);\r\n        }\r\n    },\r\n    getters: {\r\n        idea_get_data(state){\r\n            return state.ideaList[0];\r\n        },\r\n        click_idea_get_data(state){\r\n            return state.clickIdeaData[0];\r\n        },\r\n        comment_get_data(state){\r\n            return state.commentData[0];\r\n        }\r\n    },\r\n    actions: {\r\n        //아이디어 보여주기\r\n        async idea_show ({ commit }) {\r\n            let res;\r\n            try {\r\n                res = await axios.get('http://localhost:8080/idea', {\r\n                    headers : {\r\n                        'Authorization' : token\r\n                    }\r\n                });\r\n                commit('idea_set_data', res.data.data);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n            \r\n        },\r\n        async click_idea({commit}, ideaIdx ) {\r\n            let res;\r\n            try {\r\n                res = await axios.get('http://localhost:8080/idea/idea-click?ideaIdx='+ideaIdx.ideaIdx, {\r\n                    headers : {\r\n                        'Authorization' : token\r\n                    }\r\n                });\r\n                commit('click_idea_set_data', res.data.data)\r\n            }catch(err){\r\n                console.log(err);\r\n            }\r\n            \r\n        },\r\n        async idea_comment({commit}, ideaIdx){\r\n            let res;\r\n            try {\r\n                res = await axios.get('http://localhost:8080/comment?ideaIdx='+ ideaIdx.ideaIdx, {\r\n                    headers : {\r\n                        'Authorization' : token\r\n                    }\r\n                });\r\n                commit('click_comment_set_data', res.data.data);\r\n            }catch(err){\r\n                console.log(err)\r\n            }\r\n            \r\n        },\r\n        async add_comment({commit}, commentData){\r\n            let res;\r\n            commit\r\n            try {\r\n                res = await axios.post('http://localhost:8080/comment', \r\n                {\r\n                    comment : commentData.comment,\r\n                    ideaIdx : commentData.ideaIdx\r\n                },\r\n                {\r\n                    headers : {\r\n                        'Authorization' : token\r\n                    }\r\n                })\r\n            }catch(err){\r\n                console.log(err);\r\n            }\r\n            res\r\n        }\r\n    }\r\n}\r\n\r\n  export default ideaModule"]}]}